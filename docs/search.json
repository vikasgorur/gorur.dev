[
  {
    "objectID": "src/counting-is-hard.html",
    "href": "src/counting-is-hard.html",
    "title": "Counting is Hard",
    "section": "",
    "text": "George Casella, Roger L. Berger, Statistical Inference, 2nd edition, 2002. Exercise 1.20.\nMy telephone rings 12 times each week, the calls being randomly distributed among the 7 days. What is the probability that I get atleast one call each day?\nLast updated: Jul 26, 2024.\nThis problem seems simple enough at first. Each of the 12 phone calls can independently happen on any of the 7 days, so the total number of ways to distribute the phone calls is \\(7^{12}\\).\nWe want each day to have atleast one phone call, so let’s first choose 7 out of 12 calls and distribute them one per day. The number of ways to do this is: \\({12 \\choose 7} \\cdot 7!\\). Each of the remaining 5 calls can happen on any of the 7 days, so the number of ways is \\(7^5\\). Putting it all together the probability we want is:\n\\[\n\\frac{{12 \\choose 7} \\cdot 7! \\cdot 7^5}{7^{12}}\n\\]\nimport math\n\nmath.comb(12, 7) * math.factorial(7) * 7**5 / 7**12\n\n4.846960025159585\nWell, that’s not right. I tried a few other ways to arrive at an answer but couldn’t be sure that any of them were correct. So I gave up and wrote code instead:\nimport fastrand\n\ndef phonecalls():\n    N = 1_000_000\n    count = 0\n    week = [0, 0, 0, 0, 0, 0, 0]\n\n    for i in range(N):\n        for _ in range(12):\n            week[fastrand.pcg32randint(0, 6)] += 1\n\n        if week.count(0) == 0:\n            count += 1\n\n        week = [0, 0, 0, 0, 0, 0, 0]\n    \n    return count / N\n\nphonecalls()\n\n0.228721\nI looked up the answer in the solutions manual for the textbook. It says:\nThis answer doesn’t feel very satisfying. Even if I’d come up with it myself, I would feel more confident about the correctness of my code than this answer. Why is it so complicated?\nI’m left with more questions about counting:"
  },
  {
    "objectID": "src/counting-is-hard.html#a-performance-lesson",
    "href": "src/counting-is-hard.html#a-performance-lesson",
    "title": "Counting is Hard",
    "section": "A performance lesson",
    "text": "A performance lesson\nI initially wrote the code using NumPy but after benchmarking found that: - The vectors aren’t big enough in this case so the overhead of NumPy dominates. - Most of the time is spent in generating the random numbers.\nThe second point led me to discover the library fastrand and its accompanying paper. The impact of just swapping out the random number generator is below:\n\n\n\nmethod\ntime\n\n\n\n\nrandom.randint\n3460 ms\n\n\nfastrand\n770 ms"
  },
  {
    "objectID": "src/counting-is-hard.html#further-reading",
    "href": "src/counting-is-hard.html#further-reading",
    "title": "Counting is Hard",
    "section": "Further reading",
    "text": "Further reading\n\n\n\n\n\n\nNote\n\n\n\n\nDaniel Lemire, Fast Random Integer Generation in an Interval, ACM Transactions on Modeling and Computer Simulation, Volume 29 Issue 1, February 2019.\n\n\n\nThe paper that describes the algorithm implemented by the fastrand library. Its key insight is that bounded random numbers can be generated by doing fewer expensive integer divisions."
  },
  {
    "objectID": "src/chessrank.html",
    "href": "src/chessrank.html",
    "title": "chessrank",
    "section": "",
    "text": "Motivation: all wins should not count the same in a chess tournament. Beating a higher ranked player should count for more.\nHypothesize a ‘quality’ for each player. This leads to the system of equations in the Landau paper. This system of equations can be written in matrix form. To solve that system we need to find the eigenvalue.\nIntuitions:\n\nThe tournament is a way of discovering information. If we already have the true quality (eignevalue), then the tournament discovers no new information, thus it doesn’t change the vector.\nPower method. Repeatedly applying the matrix “pulls” any vector towards the largest eigenvalue’s eigenvector. Show this with the diagonal decomposition, and with actual example."
  },
  {
    "objectID": "src/index.html",
    "href": "src/index.html",
    "title": "Vikas Gorur",
    "section": "",
    "text": "Engineering at Airbase, previously Twitter, Blurb, Gluster.\n@vikasgorur"
  },
  {
    "objectID": "src/index.html#machine-learning",
    "href": "src/index.html#machine-learning",
    "title": "Vikas Gorur",
    "section": "Machine Learning",
    "text": "Machine Learning\nThis is my attempt to build the “tech tree” of ML, starting from the absolute basics and ending up somewhere around GPT-4.\n\nLearning by Gradient Descent"
  },
  {
    "objectID": "src/index.html#math-exercises",
    "href": "src/index.html#math-exercises",
    "title": "Vikas Gorur",
    "section": "Math exercises",
    "text": "Math exercises\nInteresting math exercises with code to solve or verify answers.\n\nCounting is Hard"
  },
  {
    "objectID": "src/learning-by-gradient-descent.html",
    "href": "src/learning-by-gradient-descent.html",
    "title": "Learning by Gradient Descent",
    "section": "",
    "text": "This is one of the posts in a series that aims to build an understanding of Large Language Models (LLMs) starting from the absolute basics. The only background knowledge assumed is some coding ability and pre-college math. All the code is written in Julia, but I try to ensure that deep familiarity with Julia is not necessary to follow along.\nLast updated: May 23, 2024.\nWhen we first learn programming, we learn to give the computer precise instructions to solve a problem. A program is an encoding of procedural knowledge:\n– Structure and Interpretation of Computer Programs\nMachine learning is a radically different way of using computers to solve problems. We assume that in some platonic realm there exists a function that perfectly solves our problem. We try to approximate this function with a family of functions and call it our model. We pick a specific member of that family by learning the parameters of the model using training data."
  },
  {
    "objectID": "src/learning-by-gradient-descent.html#problem-how-long-will-this-job-run",
    "href": "src/learning-by-gradient-descent.html#problem-how-long-will-this-job-run",
    "title": "Learning by Gradient Descent",
    "section": "Problem: how long will this job run?",
    "text": "Problem: how long will this job run?\nA note about finding problems. When I used to endlessly consume ML textbooks, videos, blog posts, I always came away a bit dissatisfied and feeling like I hadn’t really learned anything. Will the method I just learned work on anything other than the Iris dataset from 1936? Learning that way skipped over one of the hard parts of doing ML: figuring out what kind of model would even work for a given problem. If you have felt the same way, I encourage you to find problems and datasets from your own life, or atleast find a different dataset on your own and try to apply your newly learned techniques to it.\nFor this post I’ve assembled a dataset from a problem I encountered myself. Assume there is an ML training job that you want to run on datasets of varying sizes. It’s not important what the job does. The only intuition we need is the reasonable expectation that the running time of the job is proportional to the number of training examples in a given run. We can scatter plot the data and confirm this intuition.\n\nimport CSV\nusing DataFrames, Plots\n\nmetrics = CSV.read(\"data/metrics.csv\", DataFrame)\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGKS: dlopen(/Users/vikasprasad/.julia/artifacts/edbc277786f6302d431e3bf6cec5e21d9ee95e90/lib/cairoplugin.so, 0x0001): Library not loaded: @rpath/libtiff.6.dylib\n  Referenced from: &lt;4C4C4442-5555-3144-A1AA-51DB50BFDCA6&gt; /Users/vikasprasad/.julia/artifacts/edbc277786f6302d431e3bf6cec5e21d9ee95e90/lib/cairoplugin.so\n  Reason: tried: '/Users/vikasprasad/.julia/artifacts/edbc277786f6302d431e3bf6cec5e21d9ee95e90/lib/./libtiff.6.dylib' (no such file), '/Users/vikasprasad/.julia/artifacts/edbc277786f6302d431e3bf6cec5e21d9ee95e90/lib/./libtiff.6.dylib' (no such file), '/workspace/destdir/lib/libtiff.6.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/workspace/destdir/lib/libtiff.6.dylib' (no such file), '/Users/vikasprasad/.julia/artifacts/edbc277786f6302d431e3bf6cec5e21d9ee95e90/lib/./libtiff.6.dylib' (no such file), '/Users/vikasprasad/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/lib/libtiff.6.dylib' (no such file), '/usr/local/lib/libtiff.6.dylib' (no such file), '/usr/lib/libtiff.6.dylib' (no such file, not in dyld cache)\n\n\nGiven that we have one continuous input variable n and we wish to predict another continuous variable duration, the simplest model to try is a line that is closest to all the points. For reasons of convention we’ll denote our input as the vector \\({\\textbf X}\\) and the output as the vector \\({\\textbf Y}\\). We’ll give these values the Julia type Rn to state that they are real-valued vectors of some size n, or in math terms, belong to the set \\(R^n\\).\n(Note that we’re scaling both \\({\\textbf X}\\) and \\({\\textbf Y}\\) values to be in the range \\([0, 1]\\). This is necessary for most ML algorithms to work well, but I don’t understand it deeply enough to explain in this post.)\n\nRn = Vector{Float64}\n\nscale(V) = (V .- minimum(V)) ./ (maximum(V) - minimum(V))\n\nX::Rn = scale(metrics[!, :n])\nY::Rn = scale(metrics[!, :duration])\n\nNow we can write our model as:\n\\[\n{\\textbf Y} = \\theta_1 + \\theta_2 {\\textbf X}\n\\]\nThe corresponding functions in Julia, for both a single input x and a vector input X.\n\nprediction(x::Float64, θ::Rn) = θ[1] .+ θ[2] * x\nprediction(X::Rn, θ::Rn) = θ[1] .+ θ[2] * X"
  },
  {
    "objectID": "src/learning-by-gradient-descent.html#learning-the-parameters",
    "href": "src/learning-by-gradient-descent.html#learning-the-parameters",
    "title": "Learning by Gradient Descent",
    "section": "Learning the parameters",
    "text": "Learning the parameters\nThe model above describes an infinite number of lines. To find a specific line that best fits the available data, we need to find the values of \\(\\theta_1\\) and \\(\\theta_2\\). We’re also making the assumption that such a line will help us predict the output variable on unseen future data. For more complicated models this is not true by default and special measures need to be taken to reduce overfitting.\nHow can we find the parameter values? The answer is one of the most important ideas in ML:\nThe parameters of a model are found by minimizing a loss function.\nThe loss function (also called the cost or objective) is a measure of how well a model fits its training data. Thus it is a function of both the parameters of the model and the training data.\nIn our problem we want the loss value to be 0 if the prediction values (denote as \\({\\hat {\\textbf Y}}\\)) exactly match the training values \\({\\textbf Y}\\). This is not possible because our data points don’t all lie on a single line. The next best thing therefore is to find parameter values such that the loss is the lowest value possible.\nWe thus want our loss function to have the following reasonable properties:\n\nIt must measure the distance between the prediction and the correct value. If the predictions are far off, the loss needs to be higher.\nEach training example must contribute to the loss.\n\nWe can thus derive the following loss function:\n\\[\nL(\\theta, {\\textbf X}, {\\textbf Y}) = \\sum_{i = 1}^{n} (Y_i - \\theta_1 + \\theta_2 X_i)^2\n\\]\n\nloss(X::Rn, Y::Rn, θ::Rn) = sum((Y - prediction(X, θ)).^2)\n\nWhy are we squaring each of the terms? Why aren’t we just using the absolute value of the difference? I’m sure there are many reasons for it, but one of them is that we are going to differentiate this function to find its minimum."
  },
  {
    "objectID": "src/learning-by-gradient-descent.html#gradient-descent",
    "href": "src/learning-by-gradient-descent.html#gradient-descent",
    "title": "Learning by Gradient Descent",
    "section": "Gradient descent",
    "text": "Gradient descent\nThe problem of finding the right \\(\\theta\\) to fit a line has an exact mathematical solution, but we’re going to find it the ML way using the technique of gradient descent.\nWe start with arbitrary values for \\(\\theta\\) and iteratively change them such that the loss gets smaller. If you imagine the loss function as a 3d surface (in this case it looks like a bowl), we start somewhere on that surface and continuously try to move downhill.\nRecall that the derivative of a function is how much its value changes when its input changes by a little bit. If the derivative at a point is positive, it means a small positive change in the input causes the function to increase. If the derivative is negative, a small positive change in the input causes the function to decrease.\nThus if our goal is to minimize \\(L(\\theta)\\), we should modify each parameter at each step by an amount that’s proportional to the derivative of the loss, but negated. Since there are many parameters we want the partial derivative of the loss with respect to each parameter, and all these derivatives considered together is the gradient.\nWe can derive expressions for the gradient by normal calculus:\n\\[\\begin{eqnarray}\n\\frac{\\partial L}{\\partial \\theta_1} &=& \\sum_{i = 0}^{n} 2 ({\\hat y}_i - y_i) \\\\\n\n\\frac{\\partial L}{\\partial \\theta_2} &=& \\sum_{i = 0}^{n} 2 \\cdot ({\\hat y}_i - y_i) \\cdot x_i \\\\\n\\end{eqnarray}\\]\nIn code we’ll call this the full_gradient, since we’re using the entire dataset to compute it. Ignore the last parameter (_::Int) for now, it’ll become relevant soon enough.\n\nfunction full_gradient(X::Rn, Y::Rn, θ::Rn, _::Int)\n    δ = zeros(2)\n    for i in eachindex(X)\n        δ[1] += 2 * (prediction(X[i], θ) - Y[i])\n        δ[2] += 2 * (prediction(X[i], θ) - Y[i]) * X[i]\n    end\n    δ\nend\n\nThe descend function below iteratively updates the parameters based on the gradient. The key line of code is:\nθ = θ .- λ .* δ\nλ here is called the learning rate. It’s the size of the step the algorithm takes when descending the gradient. Picking the right value of λ is a topic on its own, but for this example I just did trial and error until I found a learning rate that works.\nThe descend function also does a couple of other things: (1) record the value of the loss periodically (2) bail out when the loss starts to converge.\n\nTrace = Tuple{Vector{Int}, Vector{Float64}}\n\nfunction descend(gradient, λ)::Tuple{Rn, Trace}\n    θ = [-1.0, 1.0]    # Initial values of params, picked arbitrarily.\n    iters = []\n    losses::Rn = []\n\n    l = loss(X, Y, θ)\n    for i in 1:100000\n        prev_loss = l\n        l = loss(X, Y, θ)\n\n        # Bail out if the loss has converged\n        if i &gt; 1 && abs(prev_loss - l) &lt; 1e-6\n            break\n        end\n\n        # Record progress\n        if i == 1 || i % 100 == 0\n            push!(iters, i)\n            push!(losses, l)\n        end\n\n        # Compute gradient and update params\n        δ = gradient(X, Y, θ, i)\n        θ = θ .- λ .* δ\n    end\n    θ, (iters, losses)\nend\n\nRunning the descent gives:\n\nfunction run_descent(g, λ)::Tuple{Rn, Trace}\n    θ, (iters, losses) = descend(g, λ)\n    for i in eachindex(iters)\n        println(\"iteration = $(iters[i]), loss = $(losses[i])\")\n    end\n\n    println(\"\\nLearned parameters: $(θ)\")\n    θ, (iters, losses)\nend\n\nθ_full, trace_full = run_descent(full_gradient, 0.0001)\n\niteration = 1, loss = 785.2017903892631\niteration = 100, loss = 0.563344576312615\niteration = 200, loss = 0.5630096900792942\niteration = 300, loss = 0.5627743358649988\niteration = 400, loss = 0.5626089316140903\n\nLearned parameters: [0.0028709396829187934, 1.056015683369787]\n\n\n([0.0028709396829187934, 1.056015683369787], ([1, 100, 200, 300, 400], [785.2017903892631, 0.563344576312615, 0.5630096900792942, 0.5627743358649988, 0.5626089316140903]))"
  },
  {
    "objectID": "src/learning-by-gradient-descent.html#stochastic-gradient",
    "href": "src/learning-by-gradient-descent.html#stochastic-gradient",
    "title": "Learning by Gradient Descent",
    "section": "Stochastic gradient",
    "text": "Stochastic gradient\nThere’s a massive improvement possible to the above method that sounds crazy the first time you hear it: what if instead of using the entire dataset to compute the gradient, we used just a single training example?\nThe gradient computed this way is called the stochastic gradient because it’s a random messy estimate of the true (full) gradient.\nWe implement this in code by getting rid of the loop from full_gradient and instead passing in the index (i) of the training example we want to use to compute the gradient.\n\nfunction stochastic_gradient(X::Rn, Y::Rn, θ::Rn, i::Int)\n    δ = zeros(2)\n    i = i % length(X) + 1\n    δ[1] += 2 * (prediction(X[i], θ) - Y[i])\n    δ[2] += 2 * (prediction(X[i], θ) - Y[i]) * X[i]\n    δ\nend\n\nRunning the descent gives:\n\nθ_stochastic, trace_stochastic = run_descent(stochastic_gradient, 0.004)\n\niteration = 1, loss = 785.2017903892631\niteration = 100, loss = 162.69862597513452\niteration = 200, loss = 33.268562089220914\niteration = 300, loss = 6.434335117995298\niteration = 400, loss = 1.7676343507597911\niteration = 500, loss = 0.8439342998345113\niteration = 600, loss = 0.5878583518019485\niteration = 700, loss = 0.5866052407717818\niteration = 800, loss = 0.5851867783586532\niteration = 900, loss = 0.5892564708337718\niteration = 1000, loss = 0.5795181021754086\n\nLearned parameters: [0.003665897150444524, 1.0223054414790391]\n\n\n([0.003665897150444524, 1.0223054414790391], ([1, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], [785.2017903892631, 162.69862597513452, 33.268562089220914, 6.434335117995298, 1.7676343507597911, 0.8439342998345113, 0.5878583518019485, 0.5866052407717818, 0.5851867783586532, 0.5892564708337718, 0.5795181021754086]))\n\n\nIt’s pretty close to the answer we got from using the full gradient! Note that we had to use a different learning rate (0.004) to get this to converge. We can plot both lines against the data to see how well they fit and how close they are to each other.\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEstimating the gradient using a fraction of the dataset makes large-scale machine learning possible. A real-world neural network like GPT-3 has 175 billion parameters, the vectors involved have dimensions in the tens of thousands, and the number of training examples is in the billions. It would be practically impossible to train a model like that by computing the full gradient on each iteration.\nThe optimization methods used to train such models are far more sophisticated (e.g., Adam) but they retain the core idea that a fuzzy estimate of the gradient derived from a subset of the data is enough to reach an acceptable minimum of the loss function."
  },
  {
    "objectID": "src/learning-by-gradient-descent.html#why-does-it-work",
    "href": "src/learning-by-gradient-descent.html#why-does-it-work",
    "title": "Learning by Gradient Descent",
    "section": "Why does it work?",
    "text": "Why does it work?\nWhy does this method of stochastic gradient descent work so well, even for loss functions that are unimaginably complex? These are the answers I’ve been able to gather so far:\n\nMany loss functions in ML are designed to be convex (bowl-shaped).\nThere is redundancy in the data. If there are say 10 points all close together, the gradient calculated using just one of those points will be pretty close to the one calculated using all 10 points.\nWe don’t need to know the exact gradient, just an unbiased estimator of it. Put another way, if you want to get from San Francisco to LA, you don’t need the exact compass direction, you just need to get on one of the freeways going south."
  },
  {
    "objectID": "src/learning-by-gradient-descent.html#further-reading",
    "href": "src/learning-by-gradient-descent.html#further-reading",
    "title": "Learning by Gradient Descent",
    "section": "Further Reading",
    "text": "Further Reading\n\n\n\n\n\n\n\nAndrew Ng, Lecture Notes for CS229, Spring 2022.\n\n\n\n\nThe structure of this post closely follows section 1.1 of these notes. Also note section 1.2 that contains the exact mathematical solution to the linear regression problem.\n\n\n\n\n\n\n\nMarc Peter Deisenroth, A. Aldo Faisal, Cheng Soon Ong, Mathematics for Machine Learning, Chapter 7, 2020.\n\n\n\n\nSection 7.1 contains a detailed discussion of gradient descent methods, including more sophisticated ideas like momentum.\n\n\n\n\n\n\n\nLéon Bottou, et al., Optimization Methods for Large-Scale Machine Learning, 2016.\n\n\n\n\nSection 3.3 describes many motivations for using stochastic gradient descent and why it works so well."
  },
  {
    "objectID": "src/learning-by-gradient-descent.html#notes-on-julia",
    "href": "src/learning-by-gradient-descent.html#notes-on-julia",
    "title": "Learning by Gradient Descent",
    "section": "Notes on Julia",
    "text": "Notes on Julia\nIf you haven’t seen Julia code before, a few things to note:\n\nYou can use any Unicode character like θ, λ as a variable name.\nJulia supports broadcasting of any operator or function across arrays. Specifically in this post, if X and Y are arrays, X .- Y performs element-wise subtraction. The same applies to .* and so on.\nYou can define functions in Julia as single-line “equations”. For example, hypotenuse(a, b) = sqrt(a^2 + b^2).\nYou can define multiple versions of a function that differ in the types of their arguments. We did this for the prediction function."
  }
]