[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vikas Gorur",
    "section": "",
    "text": "Engineering at Airbase, previously Twitter, Blurb, Gluster.\n@vikasgorur"
  },
  {
    "objectID": "index.html#machine-learning",
    "href": "index.html#machine-learning",
    "title": "Vikas Gorur",
    "section": "Machine Learning",
    "text": "Machine Learning\nThis is my attempt to build the “tech tree” of ML, starting from the absolute basics and ending up somewhere around GPT-4.\n\nPath to GPT\nLearning by gradient descent\nBreaking Caesar ciphers using relative entropy\n\n\nmakemore"
  },
  {
    "objectID": "index.html#applied-math",
    "href": "index.html#applied-math",
    "title": "Vikas Gorur",
    "section": "Applied Math",
    "text": "Applied Math\n\nCounting is hard"
  },
  {
    "objectID": "index.html#annotations",
    "href": "index.html#annotations",
    "title": "Vikas Gorur",
    "section": "Annotations",
    "text": "Annotations\nMy notes on papers and articles I’ve read.\n\nHistory of Language Modeling"
  },
  {
    "objectID": "posts/path-to-gpt.html",
    "href": "posts/path-to-gpt.html",
    "title": "Path to GPT",
    "section": "",
    "text": "Last updated: Oct 11, 2024.\nThis post is my attempt to draw the shortest path from knowing a little bit of ML to understanding state of the art language models (GPTx). It includes both milestone papers and the best resources I’ve found to understand a concept. I also like knowing the history of things so there will be a bunch of papers that might really only be of historical interest.\nThis is a personal path, with the goal of being a reasonably good practitioner of ML, not a researcher."
  },
  {
    "objectID": "posts/path-to-gpt.html#math-background",
    "href": "posts/path-to-gpt.html#math-background",
    "title": "Path to GPT",
    "section": "Math background",
    "text": "Math background\nThere is no end to the amount of math one could learn before studying ML, and usually the more I learn the more it seems to help. However, I’ve also found that it’s ok to “lazy-load” the required math once you’ve acquired a decent intuition in each of the major areas. This section therefore is just going to be a list of the areas of math that can be helpful and the best resources I’ve found for learning them.\nProbability\nProbability is the foundation for all of ML, statistics, and science. It’s also way more complicated than our brief encounter with it in high school or college makes us believe. I’m always on the look out for books and articles that help in developing a good intuition for probability.\n(hamming?) is one such book.\nInformation Theory\nInformation seems like the most natural concept to try to understand ML and stats. Many of the questions of interest can be posed as information theory questions: “what has a model learnt?”, or “what did this experiment tell us?”, “how much can a model of a certain size learn?”\nLinear Algebra\nLinear Algebra has the worst branding in all of math. It’s more exciting to think of the subject as “thinking in high-dimensional spaces”. Everything in ML deals with vectors with impossibly high dimensions (for example, each token in GPT3 is represented as a vector in a ~50,000 dimension space).\nThe video series “Essence of Linear Algebra” ((3blue1brown?)) was the first time linear algebra made any intuitive sense to me."
  },
  {
    "objectID": "posts/path-to-gpt.html#optimization-in-ml",
    "href": "posts/path-to-gpt.html#optimization-in-ml",
    "title": "Path to GPT",
    "section": "Optimization in ML",
    "text": "Optimization in ML\nThe goal of all ML training is to find an acceptably low value of the loss function."
  },
  {
    "objectID": "posts/path-to-gpt.html#automatic-differentiation",
    "href": "posts/path-to-gpt.html#automatic-differentiation",
    "title": "Path to GPT",
    "section": "Automatic Differentiation",
    "text": "Automatic Differentiation\nAD is the key to training large neural networks. AD libraries automatically figure out the gradient of the loss function as long as the computation of the loss function is expressed in a form that the library expects. For example, in PyTorch the computation is expressed as tensor operations.\nBaydin et al. (2015) is a great survey of the various AD methods. For ML training we care about “reverse mode”.\nPaszke et al. (2019) describes PyTorch, the most widely used library for deep learning in production."
  },
  {
    "objectID": "posts/path-to-gpt.html#what-are-neural-networks",
    "href": "posts/path-to-gpt.html#what-are-neural-networks",
    "title": "Path to GPT",
    "section": "What are neural networks?",
    "text": "What are neural networks?\nNeural networks began as the single-layer “perceptron”. I think it’s important to recognize the\nRosenblatt perceptron Rumelhart backprop\nLeCun et al. (1989) did handwriting recognition.\nAndrej Karpathy (2022) re-implements that paper with today’s hardware.\nKrizhevsky, Sutskever, and Hinton (2012) kick-started the modern deep learning revolution by achieving a significant jump in performance on the image recognition task."
  },
  {
    "objectID": "posts/path-to-gpt.html#what-is-language-modeling",
    "href": "posts/path-to-gpt.html#what-is-language-modeling",
    "title": "Path to GPT",
    "section": "What is language modeling?",
    "text": "What is language modeling?"
  },
  {
    "objectID": "posts/path-to-gpt.html#how-is-language-modeling-done-with-neural-networks",
    "href": "posts/path-to-gpt.html#how-is-language-modeling-done-with-neural-networks",
    "title": "Path to GPT",
    "section": "How is language modeling done with neural networks?",
    "text": "How is language modeling done with neural networks?\nYoshua Bengio - neural language model unreasonably effectiveness of RNNs"
  },
  {
    "objectID": "posts/path-to-gpt.html#how-to-build-gpt",
    "href": "posts/path-to-gpt.html#how-to-build-gpt",
    "title": "Path to GPT",
    "section": "How to build GPT?",
    "text": "How to build GPT?\nblah\nThe bitter lesson."
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html",
    "href": "posts/learning-by-gradient-descent.html",
    "title": "Learning by gradient descent",
    "section": "",
    "text": "This is one of the posts in a series that aims to build an understanding of Large Language Models (LLMs) starting from the absolute basics. The only background knowledge assumed is some coding ability and pre-college math.\nLast updated: Aug 31, 2024.\nWhen we first learn programming, we learn to give the computer precise instructions to solve a problem. A program is an encoding of procedural knowledge:\n– Structure and Interpretation of Computer Programs\nMachine learning is a radically different way of using computers to solve problems. We assume that in some platonic realm there exists a function that perfectly solves our problem. We try to approximate this function with a family of functions and call it our model. We pick a specific member of that family by learning the parameters of the model using training data."
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html#problem-how-long-will-this-job-run",
    "href": "posts/learning-by-gradient-descent.html#problem-how-long-will-this-job-run",
    "title": "Learning by gradient descent",
    "section": "Problem: how long will this job run?",
    "text": "Problem: how long will this job run?\nA note about finding problems. When I used to endlessly consume ML textbooks, videos, blog posts, I always came away a bit dissatisfied and feeling like I hadn’t really learned anything. Will the method I just learned work on anything other than the Iris dataset from 1936? Learning that way skipped over one of the hard parts of doing ML: figuring out what kind of model would even work for a given problem. If you have felt the same way, I encourage you to find problems and datasets from your own life, or atleast find a different dataset on your own and try to apply your newly learned techniques to it.\nFor this post I’ve assembled a dataset from a problem I encountered myself. Assume there is an ML training job that you want to run on datasets of varying sizes. It’s not important what the job does. The only intuition we need is the reasonable expectation that the running time of the job is proportional to the number of training examples in a given run. We can scatter plot the data and confirm this intuition.\n\nimport pandas as pd\n\nmetrics = pd.read_csv(\"data/metrics.csv\")\n\n\n\n\n\n\n\n\n\n\nGiven that we have one continuous input variable n and we wish to predict another continuous variable duration, the simplest model to try is a line that is closest to all the points. For reasons of convention we’ll denote our input as the vector \\({\\textbf X}\\) and the output as the vector \\({\\textbf Y}.\\)\n(Note that we’re scaling both \\({\\textbf X}\\) and \\({\\textbf Y}\\) values to be in the range \\([0, 1]\\). This is necessary for most ML algorithms to work well, but I don’t understand it deeply enough to explain in this post.)\n\ndef scale(v):\n    return (v - v.min()) / (v.max() - v.min())\n\n\nX = scale(metrics[\"n\"].to_numpy())\nY = scale(metrics[\"duration\"].to_numpy())\n\nNow we can write our model as:\n\\[\n{\\textbf Y} = \\theta_0 + \\theta_1 {\\textbf X}\n\\]\nIn Python:\n\ndef prediction(X, θ):\n    return θ[0] + θ[1] * X\n\nNote that we’re multiplying a vector X with a scalar θ[1]. This works because NumPy supports broadcasting; see notes at the end of this post."
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html#learning-the-parameters",
    "href": "posts/learning-by-gradient-descent.html#learning-the-parameters",
    "title": "Learning by gradient descent",
    "section": "Learning the parameters",
    "text": "Learning the parameters\nThe model above describes an infinite number of lines. To find a specific line that best fits the available data, we need to find the values of \\(\\theta_0\\) and \\(\\theta_1\\). We’re also making the assumption that such a line will help us predict the output variable on unseen future data. For more complicated models this is not true by default and special measures need to be taken to reduce overfitting.\nHow can we find the parameter values? The answer is one of the most important ideas in ML:\nThe parameters of a model are found by minimizing a loss function.\nThe loss function (also called the cost or objective) is a measure of how well a model fits its training data. Thus it is a function of both the parameters of the model and the training data.\nIn our problem we want the loss value to be 0 if the prediction values (denote as \\({\\hat {\\textbf Y}}\\)) exactly match the training values \\({\\textbf Y}\\). This is not possible because our data points don’t all lie on a single line. The next best thing therefore is to find parameter values such that the loss is the lowest value possible.\nWe thus want our loss function to have the following reasonable properties:\n\nIt must measure the distance between the prediction and the correct value. If the predictions are far off, the loss needs to be higher.\nEach training example must contribute to the loss.\n\nWe can thus derive the following loss function:\n\\[\nL(\\theta, {\\textbf X}, {\\textbf Y}) = \\sum_{i = 1}^{n} (Y_i - \\theta_0 + \\theta_1 X_i)^2\n\\]\n\ndef loss(X, Y, θ):\n    return ((Y - prediction(X, θ)) ** 2).sum()\n\nWhy are we squaring each of the terms? Why aren’t we just using the absolute value of the difference? I’m sure there are many reasons for it, but one of them is that we are going to differentiate this function to find its minimum."
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html#gradient-descent",
    "href": "posts/learning-by-gradient-descent.html#gradient-descent",
    "title": "Learning by gradient descent",
    "section": "Gradient descent",
    "text": "Gradient descent\nThe problem of finding the right \\(\\theta\\) to fit a line has an exact mathematical solution, but we’re going to find it the ML way using the technique of gradient descent.\nWe start with arbitrary values for \\(\\theta\\) and iteratively change them such that the loss gets smaller. If you imagine the loss function as a 3d surface (in this case it looks like a bowl), we start somewhere on that surface and continuously try to move downhill.\nRecall that the derivative of a function is how much its value changes when its input changes by a little bit. If the derivative at a point is positive, it means a small positive change in the input causes the function to increase. If the derivative is negative, a small positive change in the input causes the function to decrease.\nThus if our goal is to minimize \\(L(\\theta)\\), we should modify each parameter at each step by an amount that’s proportional to the derivative of the loss, but negated. Since there are many parameters we want the partial derivative of the loss with respect to each parameter, and all these derivatives considered together is the gradient.\nWe can derive expressions for the gradient by normal calculus:\n\\[\\begin{eqnarray}\n\\frac{\\partial L}{\\partial \\theta_0} &=& \\sum_{i = 0}^{n} 2 ({\\hat y}_i - y_i) \\\\\n\n\\frac{\\partial L}{\\partial \\theta_1} &=& \\sum_{i = 0}^{n} 2 \\cdot ({\\hat y}_i - y_i) \\cdot x_i \\\\\n\\end{eqnarray}\\]\nIn code we’ll call this the full_gradient, since we’re using the entire dataset to compute it. Ignore the last parameter (_) for now, it’ll become relevant soon enough.\n\nimport numpy as np\n\ndef full_gradient(X, Y, θ, _):\n    return np.array([\n        np.sum(2 * (prediction(X, θ) - Y)),\n        np.sum(2 * (prediction(X, θ) - Y) * X)\n    ])\n\nThe descend function below iteratively updates the parameters based on the gradient. The key line of code is:\nθ = θ - λ * δ\nλ here is called the learning rate. It’s the size of the step the algorithm takes when descending the gradient. Picking the right value of λ is a topic on its own, but for this example I just did trial and error until I found a learning rate that works.\nThe descend function also does a couple of other things: (1) record the value of the loss periodically (2) bail out when the loss starts to converge.\n\ndef descend(gradient, λ):\n    θ = np.array([-1.0, 1.0])    # Initial values of params, picked arbitrarily.\n    iters = []\n    losses = []\n\n    l = loss(X, Y, θ)\n    for i in range(100000):\n        prev_loss = l\n        l = loss(X, Y, θ)\n\n        # Bail out if the loss has converged\n        if i &gt; 1 and abs(prev_loss - l) &lt; 1e-6:\n            iters.append(i)\n            losses.append(l)\n            break\n\n        # Record progress\n        if i == 1 or i % 100 == 0:\n            iters.append(i)\n            losses.append(l)\n\n        # Compute gradient and update params\n        δ = full_gradient(X, Y, θ, i)\n        θ = θ - λ * δ\n\n    return θ, (iters, losses)\n\nRunning the descent gives:\n\ndef run_descent(g, λ):\n    θ, (iters, losses) = descend(g, λ)\n    for i in range(len(iters)):\n        print(f\"i = {iters[i]:&lt;12} loss {losses[i]:&gt;12.8f}\")\n\n    print(f\"\\nLearned parameters: {θ}\")\n    return θ, (iters, losses)\n\nθ_full, trace_full = run_descent(full_gradient, 0.00001)\n\ni = 0            loss 785.20179039\ni = 1            loss 760.98085472\ni = 100          loss  34.67684647\ni = 200          loss   2.04681446\ni = 300          loss   0.62813506\ni = 400          loss   0.56640872\ni = 500          loss   0.56367921\ni = 564          loss   0.56354384\n\nLearned parameters: [0.00303936 1.04948881]"
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html#stochastic-gradient",
    "href": "posts/learning-by-gradient-descent.html#stochastic-gradient",
    "title": "Learning by gradient descent",
    "section": "Stochastic gradient",
    "text": "Stochastic gradient\nThere’s a massive improvement possible to the above method that sounds crazy the first time you hear it: what if instead of using the entire dataset to compute the gradient, we used just a single training example?\nThe gradient computed this way is called the stochastic gradient because it’s a random messy estimate of the true (full) gradient.\nWe implement this in code by getting rid of the loop from full_gradient and instead passing in the index (i) of the training example we want to use to compute the gradient.\n\ndef stochastic_gradient(X, Y, θ, i):\n    δ = np.zeros(2)\n    i = i % len(X)\n\n    δ[0] = 2 * (prediction(X[i], θ) - Y[i])\n    δ[1] = 2 * (prediction(X[i], θ) - Y[i]) * X[i]\n    return δ\n\nRunning the descent gives:\n\nθ_stochastic, trace_stochastic = run_descent(stochastic_gradient, 0.001)\n\ni = 0            loss 785.20179039\ni = 1            loss 242.72688292\ni = 100          loss   0.56226346\ni = 115          loss   0.56224460\n\nLearned parameters: [0.00268266 1.05993278]\n\n\nIt’s pretty close to the answer we got from using the full gradient! Note that we had to use a different learning rate (0.001) to get this to converge. We can plot both lines against the data to see how well they fit and how close they are to each other.\n\n\n\n\n\n\n\n\n\nEstimating the gradient using a fraction of the dataset makes large-scale machine learning possible. A real-world neural network like GPT-3 has 175 billion parameters, the vectors involved have dimensions in the tens of thousands, and the number of training examples is in the billions. It would be practically impossible to train a model like that by computing the full gradient on each iteration.\nThe optimization methods used to train such models are far more sophisticated (e.g., Adam) but they retain the core idea that a fuzzy estimate of the gradient derived from a subset of the data is enough to reach an acceptable minimum of the loss function."
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html#why-does-it-work",
    "href": "posts/learning-by-gradient-descent.html#why-does-it-work",
    "title": "Learning by gradient descent",
    "section": "Why does it work?",
    "text": "Why does it work?\nWhy does this method of stochastic gradient descent work so well, even for loss functions that are unimaginably complex? These are the answers I’ve been able to gather so far:\n\nMany loss functions in ML are designed to be convex (bowl-shaped).\nThere is redundancy in the data. If there are say 10 points all close together, the gradient calculated using just one of those points will be pretty close to the one calculated using all 10 points.\nWe don’t need to know the exact gradient, just an unbiased estimator of it. Put another way, if you want to get from San Francisco to LA, you don’t need the exact compass direction, you just need to get on one of the freeways going south."
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html#further-reading",
    "href": "posts/learning-by-gradient-descent.html#further-reading",
    "title": "Learning by gradient descent",
    "section": "Further Reading",
    "text": "Further Reading\n\n\n\n\n\n\n\nAndrew Ng, Lecture Notes for CS229, Spring 2022.\n\n\n\n\nThe structure of this post closely follows section 1.1 of these notes. Also note section 1.2 that contains the exact mathematical solution to the linear regression problem.\n\n\n\n\n\n\n\nMarc Peter Deisenroth, A. Aldo Faisal, Cheng Soon Ong, Mathematics for Machine Learning, Chapter 7, 2020.\n\n\n\n\nSection 7.1 contains a detailed discussion of gradient descent methods, including more sophisticated ideas like momentum.\n\n\n\n\n\n\n\nLéon Bottou, et al., Optimization Methods for Large-Scale Machine Learning, 2016.\n\n\n\n\nSection 3.3 describes many motivations for using stochastic gradient descent and why it works so well."
  },
  {
    "objectID": "posts/learning-by-gradient-descent.html#notes-on-numpy",
    "href": "posts/learning-by-gradient-descent.html#notes-on-numpy",
    "title": "Learning by gradient descent",
    "section": "Notes on NumPy",
    "text": "Notes on NumPy\nNumPy supports vectorized versions of many operations. Two common cases of this are: (1) a scalar with an array, like 2 * X which multiplies each element of X by 2 (2) two arrays of the same shape, like Y - X which does an element-wise subtraction.\nIn the more general case NumPy also supports broadcasting where a smaller array is duplicated sufficiently to operate element-wise against a larger array."
  }
]