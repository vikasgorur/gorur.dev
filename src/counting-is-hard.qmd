---
title: "Counting is Hard"
jupyter: python3
---

George Casella, Roger L. Berger, *Statistical Inference*, 2nd edition, 2002. Exercise 1.20.

My telephone rings 12 times each week, the calls being randomly distributed among the 7 days. What is the probability
that I get atleast one call each day?

---
_Last updated: Jul 26, 2024._

This problem seems simple enough at first. Each of the 12 phone calls can independently happen on any of the 7 days, so the total number
of ways to distribute the phone calls is $7^{12}$.

We want each day to have atleast one phone call, so let's first choose 7 out of 12 calls and distribute them one per day. The number of ways to do this is: ${12 \choose 7} \cdot 7!$. Each of the remaining 5 calls can happen on any of the 7 days, so the number of ways is $7^5$. Putting it all together the probability we want is:

$$
\frac{{12 \choose 7} \cdot 7! \cdot 7^5}{7^{12}}
$$

```{python}
import math

math.comb(12, 7) * math.factorial(7) * 7**5 / 7**12
```

Well, that's not right. I tried a few other ways to arrive at an answer but couldn't be sure that any of them were correct. So I gave up and wrote code instead:

```{python}
import fastrand

def phonecalls():
    N = 1_000_000
    count = 0
    week = [0, 0, 0, 0, 0, 0, 0]

    for i in range(N):
        for _ in range(12):
            week[fastrand.pcg32randint(0, 6)] += 1

        if week.count(0) == 0:
            count += 1

        week = [0, 0, 0, 0, 0, 0, 0]
    
    return count / N

phonecalls()
```

I looked up the answer in the solutions manual for the textbook. It says:

![](phonecalls.png)

This answer doesn't feel very satisfying. Even if I'd come up with it myself, I would feel more confident about the correctness of my code than this answer. Why is it so complicated?

I'm left with more questions about counting:

- Is there a unifying taxonomy for all counting problems? Something that allows one to almost mechanically apply rules and compute the answer? If such a taxonomy doesn't exist, why not? What is the essential complexity in problems of this kind? Is it mathematical subtlety or simply that "word problems" like this contain a lot of ambiguity and hidden assumptions?
- How important is the skill of counting? Does getting good at it lead to deeper insights into the nature of probability? Or is it one of those skills that are irrelevant in an age where computer simulation is so fast? I've long had the suspicion that a lot of statistics textbooks still teach techniques appropriate for slow computers, and books like [Statistical Rethinking](https://xcelab.net/rm/) seem to confirm that suspicion.

## A performance lesson

I initially wrote the code using NumPy but after benchmarking found that:
- The vectors aren't big enough in this case so the overhead of NumPy dominates.
- Most of the time is spent in generating the random numbers.

The second point led me to discover the library [fastrand](https://github.com/lemire/fastrand) and its accompanying paper. The impact of just swapping out the random number generator is below:

| method | time |
| --- | - |
| `random.randint` | 3460 ms |
| `fastrand` | 770 ms |


## Further reading

::: {.callout-note}
1. Daniel Lemire, [Fast Random Integer Generation in an Interval](https://arxiv.org/abs/1805.10941), ACM Transactions on Modeling and Computer Simulation, Volume 29 Issue 1, February 2019.
:::

The paper that describes the algorithm implemented by the `fastrand` library. Its key insight is that bounded random numbers can be generated by doing fewer expensive integer divisions.

