---
title: Cryptopals, Set 1
---
Last updated: _Dec 22, 2024_.

---


```clojure
(ns set1
  (:require [clojure.data.codec.base64 :as b64]))
```

We'll write a little utility function to verify answers:

```clojure
(defn verify
  "Takes a boolean or sequence of booleans and returns emoji checkmarks or crosses"
  [input]
  (let [to-emoji #(if % "✅" "❌")]
    (if (sequential? input)
      (str/join " " (map to-emoji input))
      (to-emoji input))))
```

## Challenge 1
> Convert a hex string to its base64 equivalent.

The key thing to understand here are the following equivalencies:

$6$ hex chars = $3$ bytes = $24$ bits = $4$ base64 chars.

```clojure
(defn hex->bytes
  "Convert a hex string to a byte array"
  [hex-string]
  (let [hex-pairs (re-seq #".{2}" hex-string)]
    (byte-array (map #(Integer/parseInt % 16) hex-pairs))))

(defn hex->base64
  [input]
  (-> input
      hex->bytes
      b64/encode
      String.))
      
(defn solve-ch1
  []
  (let [CH1-INPUT "49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d"
        CH1-ANSWER "SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t"]

    (verify (= CH1-ANSWER
               (hex->base64 CH1-INPUT)))))
```

<span class="eval">(solve-ch1) => ✅</span>

## Challenge 2
> Write a function that takes two equal-length buffers and produces their XOR combination.

```clojure
(defn bytes->hex
  "Convert a byte array to a hex string"
  [input]
  (apply str (map #(format "%02x" %1) input)))
  
(defn solve-ch2
  []
  (let [CH2-INPUT1 "1c0111001f010100061a024b53535009181c"
        CH2-INPUT2 "686974207468652062756c6c277320657965"
        CH2-ANSWER "746865206b696420646f6e277420706c6179"]

    (verify (= CH2-ANSWER
               (bytes->hex (map bit-xor
                                (hex->bytes CH2-INPUT1)
                                (hex->bytes CH2-INPUT2)))))))
```

<span class="eval">(solve-ch2) => ✅</span>

## Challenge 3

```clojure
(def CH3-CIPHER
  (hex->bytes
   "1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736"))
```

A readable ASCII byte is either in the range `A-Z`, or in the range `a-z` or a space. A non-readable byte is the negation of that.

```clojure
(defn non-readable [b]
  (not (or (and (>= b (byte \A)) (<= b (byte \Z)))
           (and (>= b (byte \a)) (<= b (byte \z)))
           (= b (byte \space)))))
```

The gibberish score:

```clojure
(defn gibberish-score
  [^bytes text]
  (/ (double (count (filter non-readable text)))
     (count text)))

(defn gibberish-score-str
  [text]
  (byte-array (map byte text)))
```

<span class="eval">(gibberish-score-str "ABCD?") => 0.2</span>
<span class="eval">(gibberish-score-str "*@&#$*&@#") => 1.0</span>