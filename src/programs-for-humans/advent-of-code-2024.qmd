---
title: Advent of Code 2024
---

```clojure
(defn slurp-two-columns
  "Returns the two columns of integers from the input file"
  [input-path]
  (let [lines (string/split (slurp input-path) #"\n")
        pairs (map #(map Integer/parseInt
                         (string/split % #"\s+"))
                   lines)
        pairs-interleaved (flatten pairs)
        col1 (take-nth 2 pairs-interleaved)
        col2 (take-nth 2 (rest pairs-interleaved))]
    [col1 col2]))

(defn solve-day1-part1
  [input-path]
  (let [[col1 col2] (slurp-two-columns input-path)]
    (reduce + 0
            (map #(abs (- %1 %2))
                 (sort col1) (sort col2)))))
```

```clojure
(defn slurp-rows
  "Returns the rows of integers from the input file"
  [input-path]
  (let [lines (string/split (slurp input-path) #"\n")]
    (map #(map Integer/parseInt (string/split % #"\s+")) lines)))

(defn deltas [xs]
  (map -
       (rest xs)
       (drop-last xs)))
```

<span class="eval">(deltas [1 2 3 4 1])</span>
<span class="eval-result">(1 1 1 -3)</span>

## Day 3

```clojure
(defn solve-day3-part1
  [input-path]
  (reduce + 0
          (map (fn [match]
                 (let [[_ a b] match]
                   (* (Integer/parseInt a) (Integer/parseInt b))))
               (re-seq #"mul\((\d+),(\d+)\)" (slurp input-path)))))
```

<span class="eval">(solve-day3-part1 "src/code/data/advent2024-3.txt")</span>
<span class="eval-result">171183089</span>