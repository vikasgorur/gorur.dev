---
title: Project Euler - first 100 problems
toc: true
---
Last updated: _Feb 24, 2025_.

My solutions to the problems from [Project Euler](https://projecteuler.net/archives).

## Problem 1
_Difficulty: 5%_

> Find the sum of all multiples of 3 or 5 below 1000.

```clojure
(->> (range 1000)
     (filter #(or (zero? (mod % 3)) (zero? (mod % 5))))
     (reduce +))
```

<span class="eval-result">233168</span>

## Problem 2
_Difficulty: 5%_

> By considering the terms in the Fibonacci sequence whose values
> do not exceed four million, find the sum of the even-valued terms.

```clojure
(loop [f1 1,
       f2 2,
       even-sum 0]

  (if (>= f2 4000000)
    even-sum
    (if (zero? (mod f2 2))
      (recur f2 (+ f1 f2) (+ even-sum f2))
      (recur f2 (+ f1 f2) even-sum))))
```

<span class="eval-result">4613732</span>

## Problem 3
_Difficulty: 5%_

> Find the largest prime factor of 600851475143.

We'll just brute force all primes below $\sqrt{N}$ and try them as divisors.

```clojure
(let [N 600851475143]
  (->> (primes/sieve-of-eratosthenes (int (Math/sqrt N)))
       reverse
       (filter #(zero? (mod N %)))
       first))
```
<span class="eval-result">6857</span>

## Problem 6
_Difficulty: 5%_

> Find the difference between the sum of the squares of the first
> one hundred natural numbers and the square of the sum.

```clojure
(- (int (Math/pow (->> (range 1 101)
                       (reduce +))
                  2))
   (->> (range 1 101)
        (map #(int (Math/pow % 2)))
        (reduce +)))
```

<span class="eval-result">25164150</span>

## Problem 7
_Difficulty: 5%_

> What is the 10,001st prime number?

As a consequence of the Prime Number Theorem ([wiki](https://en.wikipedia.org/wiki/Prime_number_theorem)),
the $N$th prime is approximately

$$N \ ln(N)$$

So we'll generate all primes upto a little more than that number and pick out the 10,001st one.

```clojure
(let [N 10001
      approx-nth-prime (* N (Math/log N))]
      (nth (primes/sieve-of-eratosthenes
            (int (* 1.2 approx-nth-prime)))
           (dec N)))
```

<span class="eval-result">104743</span>

## Problem 65
_Difficulty: 15%_


> $e$ can be written as the continued fraction
> $[2; 1, 2, 1, 1, 4, 1, 1, 6, 1, ... , 1, 2k, 1, ...]$
>
> The $n$th "convergent" of a continued fraction is the result of 
> summing it upto $n$ terms. Find the sum of the digits in the
> numerator of the 100th convergent of the fraction for $e$.

First we write a generic function to sum the first $n$ terms
of a continued fraction.

```clojure
(defn sum-terms
  [xs]
  (if (empty? xs)
    0
    (/ 1 (+ (first xs) (sum-terms (rest xs))))))
```

We can test that it works by computing $\sqrt{2}$ upto 10 terms.

<span class="eval">(float (+ 1 (sum-terms (repeat 9 2))))</span>
<span class="eval-result">1.4142137</span>

The fraction for $e$ is slightly more complicated because the $k$th
term can be either $2k$ or $1$.

```clojure
(defn e-terms
  "The first n terms of the continued fraction for e"
  [n]
  (take n (map (fn [k]
                 (case (mod k 3)
                   0 1
                   1 (* 2 (inc (quot k 3)))
                   2 1))
               (range n))))
```

Now sum the first 100 terms and compute the sum of the digits
of the numerator.

```clojure
(reduce + (map #(Character/digit % 10)
               (str (numerator (+ 2 (sum-terms (e-terms 99)))))))
```

<span class="eval-result">272</span>


## Helpers

These are helper functions used across problems.

Since many of the problems deal with prime numbers, let's write the Sieve of Eratosthenes to
generate all prime numbers below $n$.

```clojure
(defn sieve-of-eratosthenes
  [n]
  (let [sieve (BitSet. (inc n))]
    ;; Set all bits to true initially
    (.set sieve 0 (inc n))

    ;; 0 and 1 are not prime
    (.clear sieve 0)
    (.clear sieve 1)

    (doseq [x (range 2 (inc (int (Math/sqrt n))))]
      (doseq [i (range 2 (inc (quot n x)))]
        (.clear sieve (* x i))))
    
    (filter #(.get sieve %) (range 2 n))))
```